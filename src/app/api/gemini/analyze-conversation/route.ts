import { NextRequest, NextResponse } from 'next/server';
import { GoogleGenerativeAI } from '@google/generative-ai';

// Initialize Gemini AI
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY!);

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { conversationHistory, interviewContext } = body;

    if (!conversationHistory || !Array.isArray(conversationHistory)) {
      return NextResponse.json(
        { error: 'Invalid conversation history format' },
        { status: 400 }
      );
    }

    console.log('üß† Analyzing conversation with Gemini:', {
      conversationLength: conversationHistory.length,
      context: interviewContext
    });

    // Format conversation for Gemini
    const formattedConversation = conversationHistory
      .map((entry, index) => {
        const speaker = entry.speaker === 'user' ? 'Candidate' : 'Interviewer';
        const timestamp = entry.timestamp ? new Date(entry.timestamp).toISOString() : `Turn ${index + 1}`;
        return `${speaker} (${timestamp}): "${entry.text}"`;
      })
      .join('\n\n');

    // Create comprehensive prompt for Gemini
    const analysisPrompt = `You are an expert interview analyst. Please analyze the following interview conversation and provide:

1. **EXECUTIVE SUMMARY** (2-3 sentences): A concise overview of the interview
2. **DETAILED CONVERSATION LOG**: A structured breakdown of the conversation with insights
3. **KEY INSIGHTS**: 3-5 important observations about the candidate's responses
4. **QUALITY ASSESSMENT**: Rate the conversation quality (1-10) with reasoning
5. **DISCREPANCY ANALYSIS**: Note any potential issues or unclear parts

Interview Context: ${interviewContext || 'AI-led interview practice session'}

Conversation Transcript:
${formattedConversation}

Please format your response as JSON with the following structure:
{
  "executive_summary": "Brief overview",
  "detailed_log": "Structured breakdown",
  "key_insights": ["Insight 1", "Insight 2", "Insight 3"],
  "quality_assessment": {
    "score": 8,
    "reasoning": "Explanation of the score"
  },
  "discrepancy_analysis": "Any issues or unclear parts noted",
  "recommendations": ["Recommendation 1", "Recommendation 2"]
}`;

    // Generate analysis using Gemini
    const model = genAI.getGenerativeModel({ model: 'gemini-2.0-flash-exp' });
    
    const result = await model.generateContent(analysisPrompt);
    const response = await result.response;
    const analysisText = response.text();

    console.log('‚úÖ Gemini analysis generated successfully');

    // Try to parse the JSON response
    let parsedAnalysis;
    try {
      // Extract JSON from the response (Gemini might include markdown formatting)
      const jsonMatch = analysisText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        parsedAnalysis = JSON.parse(jsonMatch[0]);
      } else {
        // Fallback: create structured response from text
        parsedAnalysis = {
          executive_summary: analysisText.substring(0, 200) + '...',
          detailed_log: analysisText,
          key_insights: ['Analysis completed successfully'],
          quality_assessment: { score: 7, reasoning: 'Analysis generated by Gemini AI' },
          discrepancy_analysis: 'Full analysis available in detailed log',
          recommendations: ['Review the detailed log for comprehensive insights']
        };
      }
    } catch (parseError) {
      console.warn('‚ö†Ô∏è Failed to parse Gemini JSON response, using fallback:', parseError);
      parsedAnalysis = {
        executive_summary: analysisText.substring(0, 200) + '...',
        detailed_log: analysisText,
        key_insights: ['Analysis completed successfully'],
        quality_assessment: { score: 7, reasoning: 'Analysis generated by Gemini AI' },
        discrepancy_analysis: 'Full analysis available in detailed log',
        recommendations: ['Review the detailed log for comprehensive insights']
      };
    }

    return NextResponse.json({
      success: true,
      data: {
        ...parsedAnalysis,
        raw_gemini_response: analysisText,
        analysis_timestamp: new Date().toISOString(),
        conversation_length: conversationHistory.length,
        local_vs_gemini: {
          local_captured_turns: conversationHistory.length,
          local_speakers: Array.from(new Set(conversationHistory.map(e => e.speaker))),
          analysis_quality: parsedAnalysis.quality_assessment?.score || 'N/A'
        }
      }
    });

  } catch (error) {
    console.error('‚ùå Error in Gemini conversation analysis:', error);
    return NextResponse.json(
      { 
        error: 'Failed to analyze conversation',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}
